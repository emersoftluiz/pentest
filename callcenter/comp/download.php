<?php
require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/func/Gravacao.php");

//IMPEDE A CRIAÇÃO DE CACHE
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
header("Last-Modified: ".gmdate("D, d M Y H:i:s")." GMT");
header("Cache-Control: no-store, no-cache, must-revalidate");
header("Cache-Control: post-check=0, pre-check=0", false);
header("Pragma: no-cache");

//DEBUG DE VARIAVEIS QUE ESTÃO CHEGANDO

try {
  require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/conf/MKUDecode.php");

  $tipo = filter_var($_REQUEST['tipo'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^(FTP|BLOQUEIO|METLIFE|FAXDOC|DOCS|MAIL|TMPDOC|ANEXO|NAS|IM|SCREEN)$/')));
  if ($tipo === false) {
    throw new Exception("Parâmetro `tipo` inválido `{$_REQUEST['tipo']}` `{$tipo}`");
  }


  // if (strtoupper(substr($_REQUEST['arquivo'], 0, 7) == 'RECIMHU')) {
  //   $tipo = 'IM';
  // }


  if (array_key_exists('servidor', $_REQUEST) === true) {
    $servidor = filter_var($_REQUEST['servidor'], FILTER_SANITIZE_STRING);
    if ($servidor === false) {
      throw new Exception("Parâmetro `servidor` inválido `{$_REQUEST['servidor']}`");
    }
  } else {
    $servidor = '';
  }


  // MIGRAÇÃO DE ROTINAS
  if ($tipo == 'FTP') {
    $tmpLista = implode('|', array_merge(getArrPrefNomeGravacao_Uranet(), getArrPrefNomeGravacao_0900(), getArrPrefNomeGravacao_EmpVoIP(), getArrPrefNomeGravacao_Externo()));

    if ((preg_match("/^({$tmpLista})[A-Z0-9]+\.mp3$/i", $arquivo) === 1) || (preg_match("/^RecFax[A-Z0-9]+\.tif$/i", $arquivo) === 1) || (preg_match("/^fixo/i", $servidor) === 1)) {
      $tipo = 'NAS';
    }

    unset($tmpLista);
  } else if ($tipo == 'BLOQUEIO') {
    $servidor = 'fixo_bloqueio';
    $tipo = 'NAS';
  } else if ($tipo == 'METLIFE') {
    $servidor = $tipo;
    $tipo = 'NAS';

    if (preg_match("/^([A-Z]{6}_)/", $_REQUEST['arquivo']) == 1) {
      $ano_mes = substr($_REQUEST['arquivo'], 0, 6);
      $_REQUEST['arquivo'] = substr($_REQUEST['arquivo'], 7);
    } else {
      $ano_mes = '000000';
    }
  } else if ($tipo == 'SCREEN') {
    $servidor = 'screen';
    $tipo = 'NAS';
  }


  if ($tipo == 'FTP') {
    $servidor = filter_var($_REQUEST['servidor'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z]{3,}([0-9]+)?[0-9]{2}$/i')));
    if ($servidor === false) {
      throw new Exception("Parâmetro `servidor` inválido `{$_REQUEST['servidor']}`");
    }

    if (array_key_exists('diretorio', $_REQUEST) === true) {
      $diretorio = filter_var($_REQUEST['diretorio'], FILTER_SANITIZE_STRING);
      if (empty($diretorio) === true) {
        throw new Exception("Parâmetro `diretorio` inválido `{$_REQUEST['diretorio']}`");
      }
    } else {
      $diretorio = '';
    }

    $arquivo = filter_var($_REQUEST['arquivo'], FILTER_SANITIZE_STRING);
    if (empty($arquivo) === true) {
      throw new Exception("Parâmetro `arquivo` inválido `{$_REQUEST['arquivo']}`");
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/bd/ConexaoCallCenter.php");
    $conn = new ConexaoCallCenter();
    $conn->query("SELECT vlr_classe, desc_classe FROM tb_classe WHERE cod_classe = 'ADREC' AND representante = 'URANET' AND tipo_reg = 'I' AND status = 'A' AND vlr_classe = '{$servidor}'");
    $conn->close();

    if ($conn->status === false) {
      throw new Exception($conn->getDescRetorno());
    }

    if ($conn->count == 0) {
      throw new Exception('Nenhum registro encontrado');
    }

    $tmp_arr = explode('¢', $conn->result['desc_classe']);

    $param_ftp = array(
      'name' => $conn->result['vlr_classe'],
      'host' => $tmp_arr[0],
      'port' => intval($tmp_arr[1]),
      'user' => $tmp_arr[2],
      'pass' => $tmp_arr[3],
      'tout' => intval($tmp_arr[4]),
      'path' => $tmp_arr[5],
    );

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/ctr/Valida.php");

    if (Valida::Ip($param_ftp['host']) === false) {
      throw new Exception('Nâo possível acessar base de armazenamento.');
    }

    if (empty($param_ftp['user']) === true) {
      throw new Exception('Nâo possível acessar base de armazenamento.');
    }

    if (empty($param_ftp['pass']) === true) {
      throw new Exception('Nâo possível acessar base de armazenamento.');
    }

    if (intval($param_ftp['port']) == 0) {
      $param_ftp['port'] = 21;
    }

    if ($param_ftp['tout'] == 0) {
      $param_ftp['tout'] = 5;
    }

    $conn_id = ftp_connect($param_ftp['host'], $param_ftp['port'], $param_ftp['tout']);

    if (is_resource($conn_id) === false) {
      throw new Exception('Nâo possível acessar base de armazenamento.');
    }

    if (ftp_login($conn_id, $param_ftp['user'], $param_ftp['pass']) === false) {
      throw new Exception('Nâo possível acessar base de armazenamento.');
    }


    if (ftp_pasv($conn_id, true) === false) {
      throw new Exception('Nâo possível acessar base de armazenamento.');
    }

    if (empty($diretorio) === false) {
      if (ftp_chdir($conn_id, $diretorio) === false) {
        throw new Exception('Nâo possível acessar base de armazenamento.');
      }
    }

    try {
      $arq_tmp = tempnam(sys_get_temp_dir(), $arquivo);
      if (is_writable($arq_tmp) === false) {
        throw new Exception("Não foi possível alocar armazenamento temporário.");
      }

      $handle = fopen($arq_tmp, 'wb+');
      if ($handle === false) {
        throw new Exception("Não foi possível alocar armazenamento temporário.");
      }

      $ret = ftp_nb_fget($conn_id, $handle, $arquivo, FTP_BINARY);

      while ($ret == FTP_MOREDATA) {
        $ret = ftp_nb_continue($conn_id);
      }

      if ($ret == FTP_FINISHED) {
        rewind($handle);

        header("Content-type: ".finfo_file(finfo_open(FILEINFO_MIME), $arq_tmp));
        header("Content-Length: ".filesize($arq_tmp));
        header('Content-Disposition: attachment; filename="'.$arquivo.'"');

        fpassthru($handle);
      }

      ftp_close($conn_id);

      fclose($handle);

      unlink($arq_tmp);
    } catch(Exception $e) {
      if (is_resource($conn_id) === false) {
        ftp_close($conn_id);
      }

      if (is_resource($handle) === true) {
        fclose($handle);
      }

      if (empty($arq_tmp) === false) {
        unlink($arq_tmp);
      }

      throw $e;
    }
  } else if ($tipo == 'FAXDOC') {
    //não tem o campo num e não será migrada para o NAS
    $seq = filter_var($_REQUEST['seq'], FILTER_SANITIZE_NUMBER_INT);
    if ((is_numeric($seq) === false) || ($seq < 1)) {
      throw new Exception("Parâmetro `seq` inválido `{$_REQUEST['seq']}`");
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/bd/ConexaoDocumentos.php");
    $conn = new ConexaoDocumentos();

    $conn->query("SELECT * FROM tb_fax_doc WHERE seq = '{$seq}'");
    $conn->close();

    if ($conn->status === false) {
      throw new Exception($conn->getDescRetorno());
    }

    if ($conn->count == 0) {
      throw new Exception('Nenhum registro encontrado');
    }

    header("Content-type: {$conn->result['tipo']}");
    header("Content-length: {$conn->result['tamanho']}");
    header('Content-Disposition: attachment; filename="'.$conn->result['nome'].'.'.$conn->result['extensao'].'"');

    print $conn->result['dados'];
  } else if ($tipo == 'DOCS') {
    $num = filter_var($_REQUEST['num'], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1)));
    if (is_numeric($num) === false) {
      throw new Exception("Parâmetro `num` inválido `{$_REQUEST['num']}`");
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/bd/ConexaoDocumentos.php");
    $conn = new ConexaoDocumentos();
    $conn->query("SELECT * FROM tb_documentos WHERE num = '{$num}'");
    $conn->close();

    if ($conn->status === false) {
      throw new Exception($conn->getDescRetorno());
    }

    if ($conn->count == 0) {
      throw new Exception('Nenhum registro encontrado');
    }

    //função que busca o conteudo no NAS caso necessário Marcelo 25/06/2019
    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/func/FuncDocs.php");
    $arr_blob = getBlobArq($conn->result['nome'], $conn->result['dados'], $conn->result['tipo'], 'tb_documentos', $num, $conn->result['data_insert']);

    if ($arr_blob['status'] !== true) {
      throw new Exception($arr_blob['dados']);
    }

    header("Content-type: {$conn->result['tipo']}");
    header("Content-length: ".strlen($arr_blob['dados']));
    header('Content-Disposition: attachment; filename="'.$conn->result['nome'].'.'.$conn->result['extensao'].'"');

    print $arr_blob['dados'];
  } else if ($tipo == 'MAIL') {
    $origem = filter_var($_REQUEST['origem'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^(ENV|REC)$/')));
    if ($origem === false) {
      throw new Exception("Parâmetro `origem` inválido `{$_REQUEST['origem']}`");
    }
    $origem = strtolower($origem);

    $anomes = filter_var($_REQUEST['anomes'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[0-9]{2}(0[1-9]|1[0-2])$/')));
    if ($anomes === false) {
      throw new Exception("Parâmetro `anomes` inválido `{$_REQUEST['anomes']}`");
    }

    $num = filter_var($_REQUEST['num'], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1)));
    if (is_numeric($num) === false) {
      throw new Exception("Parâmetro `num` inválido `{$_REQUEST['num']}`");
    }

    $seq = filter_var($_REQUEST['seq'], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1)));
    if (is_numeric($seq) === false) {
      throw new Exception("Parâmetro `seq` inválido `{$_REQUEST['seq']}`");
    }

    $arquivo = filter_var($_REQUEST['arquivo'], FILTER_SANITIZE_STRING);
    if (empty($arquivo) === true) {
      throw new Exception("Parâmetro `arquivo` inválido `{$_REQUEST['arquivo']}`");
    }

    ini_set('memory_limit', '256M');

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/bd/ConexaoEmail.php");
    $conn = new ConexaoEmail();
    $conn->query("SELECT tipo, tamanho, dados FROM tb_email_{$origem}_anexo_{$anomes} WHERE num = '{$num}' AND seq = '{$seq}'");
    $conn->close();

    if ($conn->status === false) {
      throw new Exception($conn->getDescRetorno());
    }

    if ($conn->count == 0) {
      throw new Exception('Nenhum registro encontrado');
    }

    header("Content-type: {$conn->result['tipo']}");
    header("Content-Length: {$conn->result['tamanho']}");
    header('Content-Disposition: attachment; filename="'.$arquivo.'"');

    print $conn->result['dados'];
  } else if ($tipo == 'TMPDOC') {
    //não tem o campo num e não será migrada para o NAS
    $seq = filter_var($_REQUEST['seq'], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1)));
    if (is_numeric($seq) === false) {
      throw new Exception("Parâmetro `seq` inválido `{$_REQUEST['seq']}`");
    }

    if (array_key_exists('view', $_REQUEST) === true) {
      $view = $_REQUEST['view'];
      if (preg_match('/^[SN]$/', $view) !== 1) {
        throw new Exception("Parâmetro `view` inválido `{$_REQUEST['view']}`");
      }
    } else {
      $view = 'N';
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/bd/ConexaoDocumentos.php");
    $conn = new ConexaoDocumentos();
    $conn->query("SELECT * FROM tb_tmp_doc WHERE seq = '{$seq}'");
    $conn->close();

    if ($conn->status === false) {
      throw new Exception($conn->getDescRetorno());
    }

    if ($conn->count == 0) {
      throw new Exception('Nenhum registro encontrado');
    }

    if (($view == 'S') && ($conn->result['tipo'] == 'text/html')) {
      $conn->result['dados'] = str_replace('<head>', '<head><script type="text/javascript">document.onclick = function () {  window.print();};window.onload = function () {  window.print();};</script>', $conn->result['dados']);

      // $conn->result['dados'] = str_replace('phpboleto/images', '/callcenter/phpboleto/images', $conn->result['dados']);
    }

    header("Content-type: {$conn->result['tipo']}");
    header("Content-length: ".strlen($conn->result['dados']));
    if ($view == 'N') {
      header('Content-Disposition: attachment; filename="'.$conn->result['nome'].'.'.$conn->result['extensao'].'"');
    }

    print $conn->result['dados'];
  } else if ($tipo == 'ANEXO') {
    //tem o campo num mas não é auto increment e não será migrada para o NAS
    $anomes = filter_var($_REQUEST['anomes'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[0-9]{2}(0[1-9]|1[0-2])$/')));
    if ($anomes === false) {
      throw new Exception("Parâmetro `anomes` inválido `{$_REQUEST['anomes']}`");
    }

    $num = filter_var($_REQUEST['num'], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1)));
    if (is_numeric($num) === false) {
      throw new Exception("Parâmetro `num` inválido `{$_REQUEST['num']}`");
    }

    $seq = filter_var($_REQUEST['seq'], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1)));
    if (is_numeric($seq) === false) {
      throw new Exception("Parâmetro `seq` inválido `{$_REQUEST['seq']}`");
    }

    $arquivo = filter_var($_REQUEST['arquivo'], FILTER_SANITIZE_STRING);
    if (empty($arquivo) === true) {
      throw new Exception("Parâmetro `arquivo` inválido `{$_REQUEST['arquivo']}`");
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/bd/ConexaoDocumentos.php");
    $conn = new ConexaoDocumentos();
    $conn->query("SELECT tipo, tamanho, dados FROM tb_anexo_{$anomes} WHERE num = '{$num}' AND seq = '{$seq}'");
    $conn->close();

    if ($conn->status === false) {
      throw new Exception($conn->getDescRetorno());
    }

    if ($conn->count == 0) {
      throw new Exception('Nenhum registro encontrado');
    }

    header("Content-type: {$conn->result['tipo']}");
    header("Content-Length: {$conn->result['tamanho']}");
    header('Content-Disposition: attachment; filename="'.$arquivo.'"');

    print $conn->result['dados'];
  } else if ($tipo == 'NAS') {
    $arquivo = filter_var($_REQUEST['arquivo'], FILTER_SANITIZE_STRING);
    if (empty($arquivo) === true) {
      throw new Exception("Parâmetro `arquivo` inválido `{$_REQUEST['arquivo']}`");
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/ctr/Valida.php");
    if (array_key_exists('nb', $_REQUEST) === true) {
      $nb = filter_var($_REQUEST['nb'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z0-9]{4}$/')));
      if ($nb === false) {
        throw new Exception("Parâmetro `nb` inválido `{$_REQUEST['nb']}`");
      }
    } else {
      $nb = '';
    }

    if (array_key_exists('grupo', $_REQUEST) === true) {
      $grupo = $_REQUEST['grupo'];
      if (Valida::Grupo_GRATE($grupo) === false) {
        throw new Exception("Parâmetro `grupo` inválido `{$_REQUEST['grupo']}`");
      }
    } else {
      $grupo = '';
    }

    if (array_key_exists('empresa', $_REQUEST) === true) {
      $empresa = $_REQUEST['empresa'];
      if (empty($empresa) === false) {
        if (Valida::Representante($empresa) === false) {
          throw new Exception("Parâmetro `empresa` inválido `{$_REQUEST['empresa']}`");
        }
      }
    } else {
      $empresa = '';
    }

    if (array_key_exists('tipo_gravacao', $_REQUEST) === true) {
      $tipo_gravacao = filter_var($_REQUEST['tipo_gravacao'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z]$/')));
      if ($tipo_gravacao === false) {
        throw new Exception("Parâmetro `tipo_gravacao` inválido `{$_REQUEST['tipo_gravacao']}`");
      }
    } else {
      $tipo_gravacao = '';
    }

    if (array_key_exists('tipo_acao', $_REQUEST) === true) {
      $tipo_acao = filter_var($_REQUEST['tipo_acao'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z]$/')));
      if ($tipo_acao === false) {
        throw new Exception("Parâmetro `tipo_acao` inválido `{$_REQUEST['tipo_acao']}`");
      }
    } else {
      $tipo_acao = '';
    }

    if (array_key_exists('tipo_include', $_REQUEST) === true) {
      $tipo_include = filter_var($_REQUEST['tipo_include'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z]$/')));
      if ($tipo_include === false) {
        throw new Exception("Parâmetro `tipo_include` inválido `{$_REQUEST['tipo_include']}`");
      }
    } else {
      $tipo_include = '';
    }

    if (array_key_exists('bina_cliente', $_REQUEST) === true) {
      $bina_cliente = filter_var($_REQUEST['bina_cliente'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[0-9]+$/')));
      if ($bina_cliente === false) {
        throw new Exception("Parâmetro `bina_cliente` inválido `{$_REQUEST['bina_cliente']}`");
      }
    } else {
      $bina_cliente = '';
    }

    if (array_key_exists('d', $_REQUEST) === true) {
      if ($_REQUEST['d'] !== 'ISA') {
        throw new Exception("Parâmetro `d` inválido `{$_REQUEST['d']}`");
      }

      require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/conf/DefineAmbiente.php");
      $_SESSION['ambiente'] = DefineAmbiente::getStrAmbiente();
    } else {
      session_start();
      if (is_array($_SESSION['session']) === false) {
        session_destroy();
        throw new Exception("Sessão inválida");
      }
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/func/Gravacao.php");

    if (strtoupper(substr($servidor, 0, 4)) == 'FIXO') {
      $tmp_arr = explode('¢', $servidor);

      $tipo_arquivo = $tmp_arr[0];
      if (preg_match('/^fixo_(bloqueio|fax|mail)$/', $tipo_arquivo) === true) {
        throw new Exception("Parâmetro `tipo_arquivo` inválido `{$tipo_arquivo}`");
      }

      $num = filter_var($tmp_arr[1], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1)));
      if (is_numeric($num) === false) {
        if (empty($tmp_arr[1]) === false) {
          throw new Exception("Parâmetro `num` inválido `{$tmp_arr[1]}`");
        }

        $num = '';
      }

      $tmsp_arquivo = time();

      $diretorio = filter_var($_REQUEST['diretorio'], FILTER_SANITIZE_STRING);
      if ((empty($diretorio) === true) && ($tipo_arquivo != 'fixo_bloqueio')) {
        throw new Exception("Parâmetro `diretorio` inválido `{$_REQUEST['diretorio']}`");
      }
    } else if (strtoupper($servidor) == 'METLIFE') {
      $tipo_arquivo = 'mp3';

      $num = '';

      $tmsp_arquivo = time();

      $diretorio = '';
    } else {
      $arr_info = getInfoGravacao(substr($arquivo, 0, -4));
      if (is_array($arr_info) === false) {
        throw new Exception("Não foi possível obter parâmetros da gravação.");
      }

      //Além destes prefixos abaixo, concatena a lista de prefixos das empresas voip
      $arr = array_merge(array('RECFAX', 'RECMAIL'), getArrPrefNomeGravacao_Uranet(), getArrPrefNomeGravacao_EmpVoIP(), getArrPrefNomeGravacao_0900(), getArrPrefNomeGravacao_Externo());

      if (preg_match("/^".implode('|', $arr)."$/", $arr_info['prefixo']) != 1) {
        throw new Exception("Não foi possível validar prefixo da gravação.");
      }

      $tipo_arquivo = $arr_info['tipo'];

      if (array_key_exists('num', $_REQUEST) === true) {
        $num = filter_var($_REQUEST['num'], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1)));
        if (is_numeric($num) === false) {
          if (empty($_REQUEST['num']) === false) {
            throw new Exception("Parâmetro `num` inválido `{$_REQUEST['num']}`");
          }

          $num = '';
        }
      } else {
        $num = '';
      }

      $tmsp_arquivo = mktime(intval($arr_info['hora'], 10), intval($arr_info['minuto'], 10), intval($arr_info['segundos'], 10), intval($arr_info['mes'], 10), intval($arr_info['dia'], 10), intval($arr_info['ano'], 10));

      $diretorio = $arr_info['grupo'].date("/y/m/d/", $tmsp_arquivo);
    }

    if (strtoupper($servidor) != 'METLIFE') {
      $ano_mes = date('Ym', $tmsp_arquivo);
    }

    $param_ftp = getInfoNASConnect("{$tipo_arquivo}¢{$num}", $ano_mes);
    if (is_array($param_ftp) === false) {
      throw new Exception("Não foi possível obter parâmetros do storage.");
    }

    if (array_key_exists('usa_armazenamento', $_REQUEST) === true) {
      if ($_REQUEST['usa_armazenamento'] == 'N') {
        $param_ftp['armazenamento'] = '';
      }
    }

    if ($servidor == 'screen') {
      $diretorio = substr($param_ftp['path'], 0, strrpos(substr($param_ftp['path'], 0, -1), '/'))."/Screen/{$diretorio}";

      $tipo_gravacao = 'V';
      $tipo_acao = 'D';

      ini_set('memory_limit', '1G');
    } else {
      $diretorio = "{$param_ftp['path']}{$diretorio}";
    }

    if ($servidor == 'fixo_bloqueio') {
      $diretorio .= "{$empresa}/";
    }

    if (($param_ftp['armazenamento'] == 'S3') && ((strtoupper(substr($servidor, 0, 4)) != 'FIXO') && (strtoupper($servidor) != 'BLOQUEIO'))) {
      //TRATAMENTO SERVIÇO DE ARMAZENAMENTO - AMAZON S3
      try {
        $diretorio = substr($diretorio, 1);

        $arq_tmp = tempnam(sys_get_temp_dir(), "{$param_ftp['armazenamento']}_".((strtoupper($servidor) == 'METLIFE') ? utf8_encode($arquivo) : $arquivo));
        if (is_writable($arq_tmp) === false) {
          throw new Exception("Não foi possível alocar armazenamento temporário.");
        }

        require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/tecnologia/web/libmp3amazon.php");

        if (S3Get($diretorio.((strtoupper($servidor) == 'METLIFE') ? utf8_encode($arquivo) : $arquivo), $arq_tmp) === false) {
          throw new Exception("Não foi possível obter arquivo (S3).");
        }

        if (preg_match('/\.(avi|mp3)$/i', $arquivo) === 1) {
          if ($tipo_acao == 'D') {
            $nome_arq_download = getNomeArqGravacaoCliente($arquivo);
          } else {
            $nome_arq_download = $arquivo;
          }

          require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/func/gravaLogView.php");
          gravaLogView(substr($arquivo, 0, -4), $nb, $grupo, $empresa, $tipo_gravacao, $tipo_acao, $tipo_include, $bina_cliente, $param_ftp['armazenamento']);

          require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/ext/smartReadFile.php");
          smartReadFile($arq_tmp, $nome_arq_download, finfo_file(finfo_open(FILEINFO_MIME), $arq_tmp));
        } else {
          $handle = fopen($arq_tmp, 'rb');
          if ($handle === false) {
            throw new Exception("Não foi possível recuperar informações do storage.");
          }

          header("Content-type: ".finfo_file(finfo_open(FILEINFO_MIME), $arq_tmp));
          header("Content-Length: ".filesize($arq_tmp));
          header('Content-Disposition: attachment; filename="'.$arquivo.'"');

          fpassthru($handle);

          fclose($handle);
        }

        unlink($arq_tmp);
      } catch(Exception $e) {
        if (is_resource($handle) === true) {
          fclose($handle);
        }

        if (empty($arq_tmp) === false) {
          unlink($arq_tmp);
        }

        throw $e;
      }
    } else {
      require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/ctr/Valida.php");

      if (Valida::Ip($param_ftp['host']) === false) {
        throw new Exception('Nâo possível acessar base de armazenamento.');
      }

      if (empty($param_ftp['user']) === true) {
        throw new Exception('Nâo possível acessar base de armazenamento.');
      }

      if (empty($param_ftp['pass']) === true) {
        throw new Exception('Nâo possível acessar base de armazenamento.');
      }

      if (intval($param_ftp['port']) == 0) {
        $param_ftp['port'] = 21;
      }

      if ($param_ftp['tout'] == 0) {
        $param_ftp['tout'] = 5;
      }

      $conn_id = ftp_connect($param_ftp['host'], $param_ftp['port'], $param_ftp['tout']);

      if (is_resource($conn_id) === false) {
        throw new Exception('Nâo possível acessar base de armazenamento.');
      }

      if (ftp_login($conn_id, $param_ftp['user'], $param_ftp['pass']) === false) {
        throw new Exception('Nâo possível acessar base de armazenamento.');
      }

      if (ftp_pasv($conn_id, true) === false) {
        throw new Exception('Nâo possível acessar base de armazenamento.');
      }

      if (empty($diretorio) === false) {
        if (ftp_chdir($conn_id, $diretorio) === false) {
          throw new Exception('Nâo possível acessar base de armazenamento.');
        }
      }

      try {
        $arq_tmp = tempnam(sys_get_temp_dir(), $arquivo);
        if (is_writable($arq_tmp) === false) {
          throw new Exception("Não foi possível alocar armazenamento temporário.");
        }

        $handle = fopen($arq_tmp, 'wb+');
        if ($handle === false) {
          throw new Exception("Não foi possível alocar armazenamento temporário.");
        }

        if (strtoupper($servidor) == 'METLIFE') {
          $ret = ftp_nb_fget($conn_id, $handle, utf8_encode($arquivo), FTP_BINARY);
        } else {
          $ret = ftp_nb_fget($conn_id, $handle, $arquivo, FTP_BINARY);
        }


        while ($ret == FTP_MOREDATA) {
          $ret = ftp_nb_continue($conn_id);
        }

        if ($ret == FTP_FINISHED) {
          rewind($handle);

          if (preg_match('/\.(avi|mp3)$/i', $arquivo) === 1) {
            if ($tipo_acao == 'D') {
              $nome_arq_download = getNomeArqGravacaoCliente($arquivo);
            } else {
              $nome_arq_download = $arquivo;
            }

            require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/func/gravaLogView.php");
            gravaLogView(substr($arquivo, 0, -4), $nb, $grupo, $empresa, $tipo_gravacao, $tipo_acao, $tipo_include, $bina_cliente, $param_ftp['armazenamento']);

            require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/ext/smartReadFile.php");
            smartReadFile($arq_tmp, $nome_arq_download, finfo_file(finfo_open(FILEINFO_MIME), $arq_tmp));
          } else {
            header("Content-type: ".finfo_file(finfo_open(FILEINFO_MIME), $arq_tmp));
            header("Content-Length: ".filesize($arq_tmp));
            header('Content-Disposition: attachment; filename="'.$arquivo.'"');

            fpassthru($handle);
          }
        }

        ftp_close($conn_id);

        fclose($handle);

        unlink($arq_tmp);
      } catch(Exception $e) {
        if (is_resource($conn_id) === false) {
          ftp_close($conn_id);
        }

        if (is_resource($handle) === true) {
          fclose($handle);
        }

        if (empty($arq_tmp) === false) {
          unlink($arq_tmp);
        }

        throw $e;
      }
    }
  } else if ($tipo == 'IM') {
    $arquivo = filter_var($_REQUEST['arquivo'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^RecImH[A-Z][A-Z0-9]+$/i')));
    if ($arquivo === false) {
      throw new Exception("Parâmetro `arquivo` inválido `{$_REQUEST['arquivo']}`");
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/ctr/Valida.php");
    if (array_key_exists('nb', $_REQUEST) === true) {
      $nb = filter_var($_REQUEST['nb'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z0-9]{4}$/')));
      if ($nb === false) {
        throw new Exception("Parâmetro `nb` inválido `{$_REQUEST['nb']}`");
      }
    } else {
      $nb = '';
    }

    if (array_key_exists('grupo', $_REQUEST) === true) {
      $grupo = $_REQUEST['grupo'];
      if (Valida::Grupo_GRATE($grupo) === false) {
        throw new Exception("Parâmetro `grupo` inválido `{$_REQUEST['grupo']}`");
      }
    }

    if (array_key_exists('empresa', $_REQUEST) === true) {
      $empresa = $_REQUEST['empresa'];
      if (empty($empresa) === false) {
        if (Valida::Representante($empresa) === false) {
          throw new Exception("Parâmetro `empresa` inválido `{$_REQUEST['empresa']}`");
        }
      }
    } else {
      $empresa = '';
    }

    if (array_key_exists('tipo_gravacao', $_REQUEST) === true) {
      $tipo_gravacao = filter_var($_REQUEST['tipo_gravacao'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z]$/')));
      if ($tipo_gravacao === false) {
        throw new Exception("Parâmetro `tipo_gravacao` inválido `{$_REQUEST['tipo_gravacao']}`");
      }
    } else {
      $tipo_gravacao = '';
    }

    if (array_key_exists('tipo_acao', $_REQUEST) === true) {
      $tipo_acao = filter_var($_REQUEST['tipo_acao'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z]$/')));
      if ($tipo_acao === false) {
        throw new Exception("Parâmetro `tipo_acao` inválido `{$_REQUEST['tipo_acao']}`");
      }
    } else {
      $tipo_acao = '';
    }

    if (array_key_exists('tipo_include', $_REQUEST) === true) {
      $tipo_include = filter_var($_REQUEST['tipo_include'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[A-Z]$/')));
      if ($tipo_include === false) {
        throw new Exception("Parâmetro `tipo_include` inválido `{$_REQUEST['tipo_include']}`");
      }
    } else {
      $tipo_include = '';
    }

    if (array_key_exists('bina_cliente', $_REQUEST) === true) {
      $bina_cliente = filter_var($_REQUEST['bina_cliente'], FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[0-9]+$/')));
      if ($bina_cliente === false) {
        throw new Exception("Parâmetro `bina_cliente` inválido `{$_REQUEST['bina_cliente']}`");
      }
    } else {
      $bina_cliente = '';
    }

    ini_set('memory_limit', '256M');

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/bd/ConexaoTalk.php");
    $conn = new ConexaoTalk();
    $conn->query("SELECT n_pedido, query_string FROM tb_im_".strtolower(substr($arquivo, 5, 2))." WHERE nome_gravacao = '{$arquivo}'");


    // INÍCIO | ALTERAÇÃO PARA FAZER SELECT NAS TABELAS DO IM
    $sigla_nb = strtolower(substr($arquivo, 5, 2));
    if ($sigla_nb === 'hl' || $sigla_nb === 'hu') {
        $ano_loop = 2019;
    } else {
        $ano_loop = 2018;
    }

    do {
        $arr_ano_im_nb[] = $ano_loop;
        $ano_loop++;
    } while ($ano_loop <= intval(date("Y")));

    if (is_array($arr_ano_im_nb)) {
        foreach ($arr_ano_im_nb as $key => $ano) {
            if ($conn->count > 0) {
                break;
            } else {
                $tabela_im = "tb_im_{$sigla_nb}_{$ano}";
                $q = "SELECT n_pedido, query_string FROM {$tabela_im} WHERE nome_gravacao = '{$arquivo}'";
                $conn->query($q);
            }
        }
    }
    // FINAL | ALTERAÇÃO PARA FAZER SELECT NAS TABELAS DO IM

    $conn->close();

    if ($conn->status === false) {
      throw new Exception($conn->getDescRetorno());
    }

    if ($conn->count == 0) {
      throw new Exception('Nenhum registro encontrado');
    }

    $arrQS = unserialize($conn->result['query_string']);

    if ($arrQS['empresa_voz'] != 'PANEAS') {
      throw new Exception("Empresa não configurada `{$arrQS['empresa_voz']}`");
    }


    if (array_key_exists('d', $_REQUEST) === true) {
      if ($_REQUEST['d'] !== 'ISA') {
        throw new Exception("Parâmetro `d` inválido `{$_REQUEST['d']}`");
      }

      require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/conf/DefineAmbiente.php");
      $_SESSION['ambiente'] = DefineAmbiente::getStrAmbiente();
    } else {
      session_start();
      if (is_array($_SESSION['session']) === false) {
        session_destroy();
        throw new Exception("Sessão inválida");
      }
    }

    require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/cli/PaneasWSAudio.php");
    $objWS = new PaneasWSAudio(strtoupper(substr($arquivo, 5, 4)), $_SESSION['session']['representante'], $_SESSION['session']['operador'], array('campo_chave' => $arquivo, 'n_pedido' => $arrQS['n_pedido'], ));

    try {
      $arq_tmp = tempnam(sys_get_temp_dir(), $arquivo);
      if (is_writable($arq_tmp) === false) {
        throw new Exception("Não foi possível alocar armazenamento temporário.");
      }

      $handle = fopen($arq_tmp, 'wb+');
      if ($handle === false) {
        throw new Exception("Não foi possível alocar armazenamento temporário.");
      }

      fwrite($handle, $objWS->getAudio($arrQS['nome_gravacao_externo']));

      if ($objWS->status === false) {
        throw new Exception($objWS->getDescStatus());
      }

      rewind($handle);

      require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/func/gravaLogView.php");
      gravaLogView($arquivo, $nb, $grupo, $empresa, $tipo_gravacao, $tipo_acao, $tipo_include, $bina_cliente, $arrQS['empresa_voz']);

      require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/ext/smartReadFile.php");
      smartReadFile($arq_tmp, $arrQS['nome_gravacao_externo'], finfo_file(finfo_open(FILEINFO_MIME), $arq_tmp));

      fclose($handle);

      unlink($arq_tmp);
    } catch(Exception $e) {
      if (is_resource($handle) === true) {
        fclose($handle);
      }

      if (empty($arq_tmp) === false) {
        unlink($arq_tmp);
      }

      throw $e;
    }
  }
} catch (Exception $e) {
  header("HTTP/1.1 403 Forbidden");

  require_once("{$_SERVER['DOCUMENT_ROOT']}/libs/conf/DefineAmbiente.php");
  if ((DefineAmbiente::getStrAmbiente() == 'teste') || ($_SESSION['session']['operador'] == 're002085')) {
    header("Content-Type: text/plain");
    var_dump($param_ftp, $diretorio, $arquivo);
    var_dump($e);
    exit;
  }

  print "<html><head>403</head><body>Acesso não permitido</body></html>";
}
